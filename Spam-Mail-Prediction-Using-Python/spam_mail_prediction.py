# -*- coding: utf-8 -*-
"""Spam_Mail_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16OY-xIUqTUnooOvbAbwmAPLBQmlpNesC

<a href="https://colab.research.google.com/github/dawoodrizwan-05/Spam-email-prediction-using-ML/blob/main/spam_email_prediction.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

**Import the Dependencies**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""**Data Collection & Pre-Processing**"""

# loading data from csv file to pandas Dataframe
raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

# replace the null values with null string
mail_data = raw_mail_data.where ((pd.notnull(raw_mail_data)),' ')

# print the rows of the dataframe
mail_data

# checking the number of rows and columns in the dataframe
mail_data.shape

"""**Label Encoding**"""

# spam as 0
# ham as 1
mail_data.loc[mail_data['Category'] == 'spam','Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham','Category',] = 1

# separate data as texts and label
X = mail_data['Message']
Y = mail_data['Category']

print (X)

print (Y)

"""**Split into train & test data**

"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)
print(X.shape)
print(X_train.shape)
print(X_test.shape)

# Counting instances in each set
train_count = len(X_train)
test_count = len(X_test)

# Creating labels and sizes for the pie chart
labels = ['Train', 'Test']
sizes = [train_count, test_count]

# Creating a pie chart
fig1, ax1 = plt.subplots()
ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)

# Setting aspect ratio to be equal so that the pie chart looks like a circle
ax1.axis('equal')

# Adding a title to the pie chart
plt.title('Train-Test Split')

# Displaying the pie chart
plt.show()

"""**Feature Extraction**"""

# convert text data into numerical values that can be used as input to the logistic regression
feature_extraction = TfidfVectorizer(min_df = 1, stop_words = 'english', lowercase = 'True')
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)


# convert Y_train and Y_test values as integers
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train)

print(X_train_features)

"""**Logistic Regression**

Training Model
"""

# trainning the Logistic Regression model with the training data
model = LogisticRegression()
model.fit(X_train_features, Y_train)

"""Evaluate the trained model"""

# prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print ('Accuracy on training data :',accuracy_on_training_data)

# prediction on testing data
prediction_on_testing_data = model.predict(X_test_features)
LR_accuracy_on_testing_data = accuracy_score(Y_test, prediction_on_testing_data)

print ('Accuracy on testing data :', LR_accuracy_on_testing_data)

# Compute the percentage of accuracy for training and testing data
train_percent = accuracy_on_training_data * 100
test_percent = LR_accuracy_on_testing_data * 100

# Create a list of labels for the pie chart
labels = ['Training Accuracy', 'Testing Accuracy']

# Create a list of values for the pie chart
values = [train_percent, test_percent]

# Create the pie chart
plt.pie(values, labels=labels, autopct='%1.1f%%')

# Add a title to the pie chart
plt.title('Accuracy on Training and Testing Data')

# Show the pie chart
plt.show()

"""Building a Prediction System"""

input_mail = ["Sunshine Quiz Wkly Q! Win a top Sony DVD player if u know which country the Algarve is in? Txt ansr to 82277. Â£1.50 SP:Tyrone"]

# covert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# prediction
prediction = model.predict(input_data_features)
print(prediction)

if prediction[0]==1:
  print('ham mail')

else:
  print('spam mail')

"""**Support Vector Machine**

Training Model
"""

# train the SVM model with the training data
model = SVC(kernel='linear')
model.fit(X_train_features, Y_train)

"""Evaluate the trained model"""

# prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print ('Accuracy on training data using SVM :',accuracy_on_training_data)

# prediction on testing data
prediction_on_testing_data = model.predict(X_test_features)
SVM_accuracy_on_testing_data = accuracy_score(Y_test, prediction_on_testing_data)

print ('Accuracy of testing data using SVM:',SVM_accuracy_on_testing_data)

# Compute the percentage of accuracy for training and testing data
train_percent = accuracy_on_training_data * 100
test_percent = SVM_accuracy_on_testing_data * 100

# Create a list of labels for the pie chart
labels = ['Training Accuracy', 'Testing Accuracy']

# Create a list of values for the pie chart
values = [train_percent, test_percent]

# Create the pie chart
plt.pie(values, labels=labels, autopct='%1.1f%%')

# Add a title to the pie chart
plt.title('Accuracy on Training and Testing Data')

# Show the pie chart
plt.show()

"""Building a Prediction System"""

input_mail = ["hello ehsan you got winner prize"]
# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# prediction
prediction = model.predict(input_data_features)
print(prediction)

if prediction[0]==1:
  print('ham mail')
else:
  print('spam mail')

"""**Naive Bayes Model**

Training Model
"""

# train the Naive Bayes model with the training data
model = MultinomialNB()
model.fit(X_train_features, Y_train)

"""Evaluate the trained model"""

# prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print('Accuracy on training data:', accuracy_on_training_data)

# prediction on testing data
prediction_on_testing_data = model.predict(X_test_features)
NB_accuracy_on_testing_data = accuracy_score(Y_test, prediction_on_testing_data)

print('Accuracy on testing data:', NB_accuracy_on_testing_data)

# Compute the percentage of accuracy for training and testing data
train_percent = accuracy_on_training_data * 100
test_percent = NB_accuracy_on_testing_data * 100

# Create a list of labels for the pie chart
labels = ['Training Accuracy', 'Testing Accuracy']

# Create a list of values for the pie chart
values = [train_percent, test_percent]

# Create the pie chart
plt.pie(values, labels=labels, autopct='%1.1f%%')

# Add a title to the pie chart
plt.title('Accuracy on Training and Testing Data')

# Show the pie chart
plt.show()

"""Building a Prediction System"""

input_mail = ["Dear, will call Tmorrow.pls accomodate."]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# prediction
prediction = model.predict(input_data_features)
print(prediction)

if prediction[0] == 1:
    print('ham mail')
else:
    print('spam mail')

"""**Decision Tree**"""

model = DecisionTreeClassifier()
model.fit(X_train_features, Y_train)

# prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print ('Accuracy on training data:',accuracy_on_training_data)

# prediction on testing data
prediction_on_testing_data = model.predict(X_test_features)
DT_accuracy_on_testing_data = accuracy_score(Y_test, prediction_on_testing_data)

print('Accuracy on testing data:', DT_accuracy_on_testing_data)

# Compute the percentage of accuracy for training and testing data
train_percent = accuracy_on_training_data * 100
test_percent = DT_accuracy_on_testing_data * 100

# Create a list of labels for the pie chart
labels = ['Training Accuracy', 'Testing Accuracy']

# Create a list of values for the pie chart
values = [train_percent, test_percent]

# Create the pie chart
plt.pie(values, labels=labels, autopct='%1.1f%%')

# Add a title to the pie chart
plt.title('Accuracy on Training and Testing Data')

# Show the pie chart
plt.show()

input_mail = ["hello ehsan you got winner prize"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# prediction
prediction = model.predict(input_data_features)
print(prediction)

if prediction[0] == 1:
    print('ham mail')
else:
    print('spam mail')

"""**K-nearest Neighbors**"""

KN = KNeighborsClassifier()
KN.fit(X_train_features, Y_train)

# prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print ('Accuracy on training data:',accuracy_on_training_data)

# prediction on testing data
prediction_on_testing_data = model.predict(X_test_features)
KN_accuracy_on_testing_data = accuracy_score(Y_test, prediction_on_testing_data)

print('Accuracy on testing data:', KN_accuracy_on_testing_data)

# Compute the percentage of accuracy for training and testing data
train_percent = accuracy_on_training_data * 100
test_percent = KN_accuracy_on_testing_data * 100

# Create a list of labels for the pie chart
labels = ['Training Accuracy', 'Testing Accuracy']

# Create a list of values for the pie chart
values = [train_percent, test_percent]

# Create the pie chart
plt.pie(values, labels=labels, autopct='%1.1f%%')

# Add a title to the pie chart
plt.title('Accuracy on Training and Testing Data')

# Show the pie chart
plt.show()

input_mail = ["hello ehsan you got winner prize"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# prediction
prediction = model.predict(input_data_features)
print(prediction)

if prediction[0] == 1:
    print('ham mail')
else:
    print('spam mail')



"""**Random Forest**"""

model = RandomForestClassifier()
model.fit(X_train_features, Y_train)

# prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print ('Accuracy on training data:',accuracy_on_training_data)

# prediction on testing data
prediction_on_testing_data = model.predict(X_test_features)
RF_accuracy_on_testing_data = accuracy_score(Y_test, prediction_on_testing_data)

print('Accuracy on testing data:', RF_accuracy_on_testing_data)

# Compute the percentage of accuracy for training and testing data
train_percent = accuracy_on_training_data * 100
test_percent = RF_accuracy_on_testing_data * 100

# Create a list of labels for the pie chart
labels = ['Training Accuracy', 'Testing Accuracy']

# Create a list of values for the pie chart
values = [train_percent, test_percent]

# Create the pie chart
plt.pie(values, labels=labels, autopct='%1.1f%%')

# Add a title to the pie chart
plt.title('Accuracy on Training and Testing Data')

# Show the pie chart
plt.show()

input_mail = ["hello ehsan you got winner prize"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# prediction
prediction = model.predict(input_data_features)
print(prediction)

if prediction[0] == 1:
    print('ham mail')
else:
    print('spam mail')



"""**OverAll Accuracies**"""



models = ['Logistic Regression', 'SVM','Decision Trees', 'Naive Bayes', 'KN-neighbors', 'Random Forest']
accuracies = [LR_accuracy_on_testing_data, SVM_accuracy_on_testing_data, DT_accuracy_on_testing_data, NB_accuracy_on_testing_data, KN_accuracy_on_testing_data, RF_accuracy_on_testing_data]

# create the plot with adjusted figure size
fig = plt.figure(figsize=(10, 4))
plt.plot(models, accuracies, marker ='o')
plt.title('Overall accuracies')
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.show()

