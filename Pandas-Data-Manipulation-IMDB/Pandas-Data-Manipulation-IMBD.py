# -*- coding: utf-8 -*-
"""DS-Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k_idkO9XAIK5svlZ_V7eUDaw19YQZ93k

# Data Science 
# Assignment '#2 -  Exploratory Data Analysis
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

#display wide tables 
pd.set_option('display.width', 500)
pd.set_option('display.max_columns', 100)

from google.colab import drive
drive.mount('/content/drive')

"""We have a list of 10,000 movies with IMDB user rating as imdb.txt. We want to perform a exploratory data analysis of this data in Python by using its Pandas library.  We will perform the cleaning, transformation and then visualization on the raw data. This will help us to understand the data for further processing."""

#!head imdb.txt

"""## 1. Loading data

Read the imdb.txt into dataframe named data. The data is tab delimited. The columns names are 'imdbID', 'title', 'year', 'score', 'votes', 'runtime', 'genres'
"""

# Your code here
data = pd.read_csv('/content/drive/MyDrive/imdb.txt', delimiter='\t', names=['imdbID', 'title', 'year', 'score', 'votes', 'runtime', 'genres'])

"""__Marks = 2__

Check the data types of each column
"""

# Your code here
data.dtypes

"""__Marks = 1__

## 2. Clean the DataFrame

The data frame has several problems

1. The runtime column is stored as a string
2. The genres column has several genres together. This way, it is hard to check which movies are Action movies and so on.
3. The movie year is also present in the title


### Fix the runtime column
Convert the string '142 mins' to number 142.
"""

# Your code here
# data.head()
print(data['runtime'][0])
setRuntime = data['runtime'][0].replace('mins.', '')
print(setRuntime)

"""__Marks = 3__

Perform this conversion on every element in the dataframe `data`
"""

# Your code here
data['runtime'] = data['runtime'].str.replace('mins.', '').astype(int)
data.head()

"""__Marks = 2__

### Split the genres

We would like to split the genres column into many columns. Each new column will correspond to a single genre, and each cell will be True or False.

First, we would like to find the all the unique genres present in any record. Its better to sort the genres to locate easily.
"""

#determine the unique genres
genres = data['genres'].str.split('|', expand=True).stack()
sortedGenres = sorted(genres.unique())
print(sortedGenres)

"""__Marks = 4__

Then make a column for each genre
"""

#make a column for each genre
for i in sortedGenres:
  data[i] = data['genres'].str.contains(i)
data.shape
data.head()

"""__Marks = 5__

### Eliminate year from the title
We can fix each element by stripping off the last 7 characters
"""

#Strip off last 7 character from title
data['title'] = data['title'].str[:-7]
data['title']

"""__Marks = 1__

## 3. Descriptive Statistics

Next, we would like to discover outliers. One possible way is to describe some basic, global summaries of the DataFrame on `score`, `runtime`, `year`, `votes`.
"""

#Call `describe` on relevant columns
allCol = data[['score', 'runtime', 'year', 'votes']]
allCol.describe()

"""__Marks = 1__

Do you see any quantity unusual. Better replace with NAN.
"""

#Your code here
data = data.replace(0, np.nan)
# data.head()

"""__Marks = 1__

Lets repeat describe to make sure that it is fine
"""

#Your code here
allCol = data[['score', 'runtime', 'year', 'votes']]
allCol.describe()

"""__Marks = 1__

### Basic plots

Lets draw histograms for release year, IMDB rating, runtime distribution
"""

#Your code here
plt.figure(figsize=(15, 5))
plt.title("Release Year")
plt.hist(data['year'], bins=40)
plt.show()

"""__Marks = 1__"""

#Your code here
plt.figure(figsize=(15, 5))
plt.title("IMDB Rating")
plt.hist(data['score'], bins=40)
plt.show()

"""__Marks = 1__"""

#Your code here
plt.figure(figsize=(15, 5))
plt.title("Runtime Distribution")
plt.hist(data['runtime'], bins=40)
plt.show()

"""__Marks = 1__

Scatter plot between IMDB rating and years. Does it shows some trend?
"""

#Your code here
plt.figure(figsize=(10, 5))
plt.title("IMDB Rating & Years")
plt.scatter(data['score'], data['year'])
plt.show()

"""__Marks = 2__

Is there any relationship between IMDB rating and number of votes? Describe
"""

#Your code here
plt.figure(figsize=(10, 5))
plt.title("IMDB Rating & Number of Votes")
plt.scatter(data['score'], data['votes'])
plt.show()

"""__Marks = 2__

### Data aggregation/Summarization

*What genres are the most frequent?* Lay down the genres in descending order of count
"""

#Your code here
#sum sums over rows by default
# print(type(sortedGenres))
frequentGenres = data[sortedGenres].sum().sort_values(ascending=False)
print(frequentGenres)

"""__Marks = 2__

Draw a bar plot to show top ten genres
"""

#Your code here
plt.figure(figsize=(15, 5))
plt.title("TOP TEN Genres")
plt.bar(frequentGenres.head(10).index, frequentGenres.head(10)) #top ten
plt.show()

"""__Marks = 2__

*How many genres does a movie have, on average?*
"""

#Your code here
#axis=1 sums over columns instead
data[sortedGenres].sum(axis=1).mean()

"""__Marks = 2__

## Explore Group Properties

Let's split up movies by decade. Find the decade mean score and draw a plot as follows:

<img src=score-year-plot.png>
"""

#Your code here
plt.title('Deacde Rating IMDB')
data['decade'] = data['year'].apply(lambda x: (x // 10) * 10)
rating = data.groupby('decade')['score'].mean()
plt.plot(rating.index, rating.values, marker='.', color='red', linestyle='-')
plt.scatter(data['year'], data['score'], alpha=0.07, color='black')
plt.show()

"""__Marks = 5__

Find the most popular movie each year
"""

#Your code here
sortedData = data.sort_values(['year', 'score'])
print(sortedData)

"""__Marks = 2__"""